/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define NUM  3
#define GAMING 4

/ {
    macros {
    };

    combos {
        compatible = "zmk,combos";

        space {
            bindings = <&kp SPACE>;
            key-positions = <10 11 12 13>;
            layers = <0 3 1 2>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <13 3>;
            layers = <0 3 1 2>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 1 2 3>;
            layers = <0 3 1 2>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <2 13>;
            layers = <0 3 1 2>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <2 11>;
            layers = <0 3 1 2>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <0 1 2 13>;
            layers = <0 3 1 2>;
        };

        shiftlock {
            bindings = <&kt LEFT_SHIFT>;
            key-positions = <2 12>;
            layers = <0 3 1 2>;
        };

        capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <3 12 11 10>;
            layers = <0 3 1 2>;
        };

        control {
            bindings = <&kp LCTRL>;
            key-positions = <0 13>;
            layers = <0 3 1 2>;
        };

        alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <0 11>;
            layers = <0 3 1 2>;
        };

        gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <0 12>;
            layers = <0 3 1 2>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <10 2 3>;
            layers = <0 3 1 2>;
        };

        nav_layer {
            bindings = <&trans>;
            key-positions = <11 2 13>;
            layers = <0 3 1 2>;
        };

        bt_layer {
            bindings = <&trans>;
            key-positions = <0 10 3 13>;
            layers = <0 3 1 2>;
        };

        clearBT {
            bindings = <&bt BT_CLR>;
            key-positions = <1 11 12 2>;
            layers = <0 3 1 2>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <10 13>;
            layers = <0>;
        };

        c {
            bindings = <&kp C>;
            key-positions = <12 13>;
        };

        d {
            bindings = <&kp D>;
            key-positions = <1 2 3>;
        };

        f {
            bindings = <&kp F>;
            key-positions = <2 3>;
        };

        g {
            bindings = <&kp G>;
            key-positions = <2 1>;
        };

        h {
            bindings = <&kp H>;
            key-positions = <11 13>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <1 0>;
        };

        k {
            bindings = <&kp K>;
            key-positions = <10 12>;
        };

        l {
            bindings = <&kp L>;
            key-positions = <11 12 13>;
        };

        m {
            bindings = <&kp M>;
            key-positions = <10 11 12>;
        };

        n {
            bindings = <&kp N>;
            key-positions = <10 11>;
        };

        p {
            bindings = <&kp P>;
            key-positions = <10 11 13>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <0 1 3>;
        };

        u {
            bindings = <&kp U>;
            key-positions = <11 12>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <0 2>;
        };

        w {
            bindings = <&kp W>;
            key-positions = <0 3>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <0 1 2>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <0 1 2 3>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <11 3>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 11>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <12 3>;
        };

        apostrophe {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <11 12 3>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <10 3>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T   |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G   |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B   |   |  N  |  M   |  ,  |  .  |  /  |
            //             | GUI | NAV | TAB  |   | SPC | SYM  | ALT |

            bindings = <
  &kp S   &kp T   &kp R   &kp A   &none   &none   &none   &none   &none   &none
  &kp O   &kp I   &kp Y   &kp E   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
                  &none   &none   &none   &none   &none   &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Numbers {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                 &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Symbols_1 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                 &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Symbols_2 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                 &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        // This layer is unreachable until "tri layer state" is sorted out.
        // Leaving it here for completeness.
    };
};
